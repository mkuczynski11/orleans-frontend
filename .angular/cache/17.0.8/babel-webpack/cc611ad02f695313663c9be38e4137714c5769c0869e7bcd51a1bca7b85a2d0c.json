{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst AUTH_API = 'https://localhost:8080/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(email, password) {\n    return this.http.post(AUTH_API + 'login', {\n      email,\n      password\n    }, httpOptions);\n  }\n  register(email, password) {\n    return this.http.post(AUTH_API + 'register', {\n      email,\n      password\n    }, httpOptions);\n  }\n  refreshToken(token) {\n    return this.http.post(AUTH_API + 'refresh', {\n      refreshToken: token\n    }, httpOptions);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AUTH_API","httpOptions","headers","AuthService","constructor","http","login","email","password","post","register","refreshToken","token","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/mkuczyns/desktop/MGR/orleans-frontend/src/app/_services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst AUTH_API = 'https://localhost:8080/';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'login', {\n      email,\n      password\n    }, httpOptions);\n  }\n\n  register(email: string, password: string): Observable<any> {\n    return this.http.post(AUTH_API + 'register', {\n      email,\n      password\n    }, httpOptions);\n  }\n\n  refreshToken(token: string) {\n    return this.http.post(AUTH_API + 'refresh', {\n      refreshToken: token\n    }, httpOptions);\n  }\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,QAAQ,GAAG,yBAAyB;AAE1C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAKD,OAAM,MAAOI,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACT,QAAQ,GAAG,OAAO,EAAE;MACxCO,KAAK;MACLC;KACD,EAAEP,WAAW,CAAC;EACjB;EAEAS,QAAQA,CAACH,KAAa,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACT,QAAQ,GAAG,UAAU,EAAE;MAC3CO,KAAK;MACLC;KACD,EAAEP,WAAW,CAAC;EACjB;EAEAU,YAAYA,CAACC,KAAa;IACxB,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAACT,QAAQ,GAAG,SAAS,EAAE;MAC1CW,YAAY,EAAEC;KACf,EAAEX,WAAW,CAAC;EACjB;EAAC,QAAAY,CAAA,G;qBArBUV,WAAW,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}